/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>
#include "stm32f4xx.h"
#include "system_stm32f4xx.h"
#include"FreeRTOS.h"
#include"FreeRTOSConfig.h"
#include"task.h"
#include"led.h"

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

struct param
{
	int led;
	int rate;
};

void vLedTask (void* pvParam)
{
	struct param *p = (struct param*)pvParam;
     int rate = p->rate;
	portTickType xLastWakepTime;
	while(1)
	{
		xLastWakepTime = xTaskGetTickCount();
		if(p->led == 12)
		led_toggle(LED_GREEN);
		else if(p->led == 13)
			led_toggle(LED_ORANGE);
		else if(p->led == 13)
					led_toggle(LED_RED);
		else if(p->led == 13)
					led_toggle(LED_BLUE);
		vTaskDelayUntil(&xLastWakepTime,rate/portTICK_RATE_MS);
	}
	vTaskDelete(NULL);
}

int main(void)
{
	led_init(LED_GREEN);
	led_init(LED_RED);
	led_init(LED_BLUE);
	led_init(LED_ORANGE);
	struct param par = { .led = 12, .rate = 500};
	 xTaskCreate(vLedTask, "RED", configMINIMAL_STACK_SIZE,&par, 3,NULL);
//	 xTaskCreate(vLedTask, "GREEN", configMINIMAL_STACK_SIZE,NULL, 4,NULL);
//	 xTaskCreate(vLedTask, "BLUE", configMINIMAL_STACK_SIZE,NULL, 3,NULL);
//		 xTaskCreate(vLedTask, "ORANGE", configMINIMAL_STACK_SIZE,NULL, 4,NULL);
  vTaskStartScheduler();
  while(1);
}
